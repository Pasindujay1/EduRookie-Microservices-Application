name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            gateway,
            user-service,
            course-service,
            learner-service,
            payment-service,
            notification-service,
            frontend,
          ]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies for ${{ matrix.service }}
        run: |
          cd ./${{ matrix.service }}
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run SonarCloud Scan for ${{ matrix.service }}
        run: |
          cd ./${{ matrix.service }}
          npx sonar-scanner \
            -Dsonar.projectKey=IT21219498_CTSE_Assignment_1_${{ matrix.service }} \
            -Dsonar.organization=it21219498 \
            -Dsonar.sources=. \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Upload Coverage Report for ${{ matrix.service }}
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.service }}
          path: ./${{ matrix.service }}/coverage/lcov.info

      - name: Save SonarCloud Logs
        run: cp ./${{ matrix.service }}/.scannerwork/report-task.txt logs-${{ matrix.service }}.txt || true

      - name: Upload SonarCloud Logs
        uses: actions/upload-artifact@v4
        with:
          name: sonar-logs-${{ matrix.service }}
          path: logs-${{ matrix.service }}.txt

  snyk-security-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            gateway,
            user-service,
            course-service,
            learner-service,
            payment-service,
            notification-service,
            frontend,
          ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk Test for ${{ matrix.service }}
        run: |
          cd ./${{ matrix.service }}
          snyk test --all-projects --detection-depth=4
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  docker-build-and-push:
    strategy:
      matrix:
        service:
          [
            gateway,
            user-service,
            course-service,
            learner-service,
            payment-service,
            notification-service,
            frontend,
          ]
    name: Build and Push ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: [sonarcloud-analysis, snyk-security-scan]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Build and Push ${{ matrix.service }} Image
        run: |
          IMAGE=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/docker-repo/${{ matrix.service }}
          docker build -t $IMAGE ./${{ matrix.service }}
          docker push $IMAGE

  deploy:
    strategy:
      matrix:
        service:
          [
            gateway,
            user-service,
            course-service,
            learner-service,
            payment-service,
            notification-service,
            frontend,
          ]
    name: Deploy ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: docker-build-and-push

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy ${{ matrix.service }}
        id: deploy
        run: |
          SERVICE_NAME=${{ matrix.service }}
          IMAGE=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/docker-repo/${{ matrix.service }}

          if [[ "$SERVICE_NAME" == "gateway" ]]; then
            ENV_VARS="COURSE_SERVICE_URL=${{ secrets.COURSE_SERVICE_URL }},USER_SERVICE_URL=${{ secrets.USER_SERVICE_URL }},LEARNING_SERVICE_URL=${{ secrets.LEARNING_SERVICE_URL }},PAYMENT_SERVICE_URL=${{ secrets.PAYMENT_SERVICE_URL }},NOTIFICATION_SERVICE_URL=${{ secrets.NOTIFICATION_SERVICE_URL }}"
          elif [[ "$SERVICE_NAME" == "user-service" ]]; then
            ENV_VARS="JWT_SECRET=${{ secrets.JWT_SECRET }},CONNECTION_STRING=${{ secrets.CONNECTION_STRING }},GATEWAY_URL=${{ secrets.GATEWAY_URL }}"
          elif [[ "$SERVICE_NAME" == "course-service" ]]; then
            ENV_VARS="CONNECTION_STRING=${{ secrets.CONNECTION_STRING }},CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }},CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }},CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }},CLOUDINARY_URL=${{ secrets.CLOUDINARY_URL }},GATEWAY_URL=${{ secrets.GATEWAY_URL }}"
          elif [[ "$SERVICE_NAME" == "learner-service" ]]; then
            ENV_VARS="CONNECTION_STRING=${{ secrets.CONNECTION_STRING }},GATEWAY_URL=${{ secrets.GATEWAY_URL }}"
          elif [[ "$SERVICE_NAME" == "payment-service" ]]; then
            ENV_VARS="STRIPE_KEY=${{ secrets.STRIPE_KEY }}"
          elif [[ "$SERVICE_NAME" == "notification-service" ]]; then
            ENV_VARS="USER=${{ secrets.USER }},PASSWORD=${{ secrets.PASSWORD }}"
          else
            ENV_VARS=""
          fi

          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE \
            --platform managed \
            --region ${{ secrets.GCP_REGION }} \
            --allow-unauthenticated \
            --set-env-vars "$ENV_VARS"

      - name: Health Check for ${{ matrix.service }}
        run: |
          URL=https://${{ matrix.service }}-965928461642.us-central1.run.app
          echo "Checking service health at $URL"
          for i in {1..5}; do
            if curl -sf $URL; then
              echo "✅ $URL is healthy."
              exit 0
            else
              echo "Waiting for $URL... ($i)"
              sleep 5
            fi
          done

          echo "❌ $URL failed health check. Rolling back..."
          PREV_REV=$(gcloud run revisions list --service ${{ matrix.service }} --region ${{ secrets.GCP_REGION }} --sort-by="~createTime" --limit=2 --format="value(metadata.name)" | tail -n 1)
          gcloud run services update-traffic ${{ matrix.service }} --region ${{ secrets.GCP_REGION }} --to-revisions=$PREV_REV=100
          exit 1
